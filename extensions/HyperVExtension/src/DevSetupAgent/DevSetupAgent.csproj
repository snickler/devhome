<Project Sdk="Microsoft.NET.Sdk.Worker">
  <Import Project="$(SolutionDir)ToolingVersions.props" />
  <PropertyGroup>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>dotnet-DevSetupAgent-674f51cd-70a6-4b78-8376-66efbf84c412</UserSecretsId>
    <Platforms>x86;x64;arm64</Platforms>
    <RuntimeIdentifiers>win-x86;win-x64;win-arm64</RuntimeIdentifiers>
    <PublishProfile Condition="'$(BuildingInsideVisualStudio)' != 'True'">Properties\PublishProfiles\win-$(Platform).pubxml</PublishProfile>
    <SelfContained>true</SelfContained>
  </PropertyGroup>

  <!--
  Self-contained projects get automatic RuntimeIdentifier (https://learn.microsoft.com/en-us/dotnet/core/compatibility/sdk/7.0/automatic-runtimeidentifier).
  It looks like VS doesn't set it correctly for the ARM64 platform, so we set it manually here (for all supported platforms).
  -->
  <PropertyGroup Condition="$(PlatformTarget)=='x86'">
    <RuntimeIdentifier>win-x86</RuntimeIdentifier>
  </PropertyGroup>

  <PropertyGroup Condition="$(PlatformTarget)=='x64'">
    <RuntimeIdentifier>win-x64</RuntimeIdentifier>
  </PropertyGroup>

  <PropertyGroup Condition="$(PlatformTarget)=='arm64'">
    <RuntimeIdentifier>win-arm64</RuntimeIdentifier>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Hosting" Version="9.0.0" />
    <PackageReference Include="Microsoft.Extensions.Hosting.WindowsServices" Version="9.0.0" />
    <PackageReference Include="Microsoft.Windows.CsWin32" Version="0.3.106">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Windows.CsWinRT" Version="2.0.4" />
    <PackageReference Include="Microsoft.WindowsPackageManager.Configuration.OutOfProc" Version="1.7.10091-preview">
      <GeneratePathProperty>True</GeneratePathProperty>
    </PackageReference>
    <PackageReference Include="Serilog" Version="4.0.1" />
    <PackageReference Include="Serilog.Extensions.Logging" Version="8.0.0" />
    <PackageReference Include="Serilog.Settings.Configuration" Version="8.0.2" />
    <PackageReference Include="Serilog.Sinks.Console" Version="6.0.0" />
    <PackageReference Include="Serilog.Sinks.Debug" Version="3.0.0" />
    <PackageReference Include="Serilog.Sinks.File" Version="6.0.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\..\..\common\DevHome.Common.csproj" />
    <ProjectReference Include="..\DevSetupEngineProjection\DevSetupEngineProjection.csproj" />
    <ProjectReference Include="..\DevSetupEngine\DevSetupEngine.csproj" />
    <ProjectReference Include="..\HyperVExtension.HostGuestCommunication\HyperVExtension.HostGuestCommunication.csproj" />
    <ProjectReference Include="..\Telemetry\HyperVExtension.Telemetry.csproj" />
  </ItemGroup>

  <ItemGroup>
    <ReferenceCopyLocalPaths Include="$(ProjectDir)..\DevSetupEngineIdl\bin\$(Platform)\$(Configuration)\\Microsoft.Windows.DevHome.DevSetupEngine.winmd" />
  </ItemGroup>

  <!--DevSetupAgent doesn't use Microsoft.WindowsPackageManager.Configuration.OutOfProc package directly.-->
  <!--DevSetupEngine uses it, but these dependencies are not copied to DevSetupAgent TargetDir.-->
  <!--To fix this, we need to copy these files to the TargetDir manually.-->
  <Target Name="CopyWinmdToTargetDir" BeforeTargets="BeforeBuild">
    <Copy SourceFiles="$(PkgMicrosoft_WindowsPackageManager_Configuration_OutOfProc)\runtimes\win10-$(Platform)\native\Microsoft.Management.Configuration.dll" DestinationFolder="$(TargetDir)" />
    <Copy SourceFiles="$(PkgMicrosoft_WindowsPackageManager_Configuration_OutOfProc)\runtimes\win10-$(Platform)\native\Microsoft.Management.Configuration.winmd" DestinationFolder="$(TargetDir)" />
  </Target>
</Project>
